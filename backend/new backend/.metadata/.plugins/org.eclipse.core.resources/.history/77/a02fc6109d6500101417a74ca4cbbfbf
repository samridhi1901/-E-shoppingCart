package com.cg.estore.productservice.servicetests;
import com.cg.estore.productservice.entity.Product;
import com.cg.estore.productservice.repository.ProductRepository;
 
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.autoconfigure.data.mongo.DataMongoTest;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
 
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
 
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;
 
@ExtendWith(MockitoExtension.class)
class ProductRepositoryTests {
 
    @Mock
    private ProductRepository productRepository;
 
    @Test
    void testFindByProductName() {
        // Given
        String productName = "Test Product";
        Product product = new Product();
        product.setProductName(productName);
 
        when(productRepository.findByProductName(productName)).thenReturn(Optional.of(product));
 
        // When
        List<Product> result = productRepository.findByProductName(productName);
 
        // Then
        assertTrue(result.isPresent());
        assertEquals(productName, result.get().getProductName());
 
        // Verify that the method was called
        verify(productRepository, times(1)).findByProductName(productName);
    }
 
    @Test
    void testFindByCategory() {
        // Given
        String category = "Test Category";
        Product product1 = new Product();
        product1.setCategory(category);
        Product product2 = new Product();
        product2.setCategory(category);
 
        when(productRepository.findByCategory(category)).thenReturn(Arrays.asList(product1, product2));
 
        // When
        List<Product> result = productRepository.findByCategory(category);
 
        // Then
        assertEquals(2, result.size());
        assertEquals(category, result.get(0).getCategory());
        assertEquals(category, result.get(1).getCategory());
 
        // Verify that the method was called
        verify(productRepository, times(1)).findByCategory(category);
    }
 
    @Test
    void testFindByProductType() {
        // Given
        String productType = "Test Type";
        Product product1 = new Product();
        product1.setProductType(productType);
        Product product2 = new Product();
        product2.setProductType(productType);
 
        when(productRepository.findByProductType(productType)).thenReturn(Arrays.asList(product1, product2));
 
        // When
        List<Product> result = productRepository.findByProductType(productType);
 
        // Then
        assertEquals(2, result.size());
        assertEquals(productType, result.get(0).getProductType());
        assertEquals(productType, result.get(1).getProductType());
 
        // Verify that the method was called
        verify(productRepository, times(1)).findByProductType(productType);
    }
 
    @Test
    void testDeleteByProductId() {
        // Given
        String productId = "TestProductId";
 
        // When
        productRepository.deleteByProductId(productId);
 
        // Verify that the method was called
        verify(productRepository, times(1)).deleteByProductId(productId);
    }
 
    @Test
    void testFindByProductId() {
        // Given
        String productId = "TestProductId";
        Product product = new Product();
        product.setProductId(productId);
 
        when(productRepository.findByProductId(productId)).thenReturn(Optional.of(product));
 
        // When
        Optional<Product> result = productRepository.findByProductId(productId);
 
        // Then
        assertTrue(result.isPresent());
        assertEquals(productId, result.get().getProductId());
 
        // Verify that the method was called
        verify(productRepository, times(1)).findByProductId(productId);
    }
}
 
 