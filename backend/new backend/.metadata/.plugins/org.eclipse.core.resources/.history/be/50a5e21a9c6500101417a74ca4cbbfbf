package com.cg.estore.orderservice.servicetests;
 
import com.cg.estore.orderservice.entity.*;
import com.cg.estore.orderservice.repository.OrderRepository;
import com.cg.estore.orderservice.serviceImpl.*;
 
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
 
import java.util.*;
 
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;
 
class OrderServiceImplTests {
 
    @Mock
    private OrderRepository orderRepository;
 
    @Mock
    private CartFeignClient cartFeignClient;
 
    @Mock
    private ProductFeignClient productFeignClient;
 
    @Mock
    private UserFeignClient userFeignClient;
 
    @InjectMocks
    private OrderServiceImpl orderService;
 
    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }
 
    @Test
    void testGetAllOrders() {
        List<OrderDetail> mockOrders = Arrays.asList(new OrderDetail(), new OrderDetail());
        when(orderRepository.findAll()).thenReturn(mockOrders);
 
        List<OrderDetail> result = orderService.getAllOrders();
 
        assertEquals(mockOrders.size(), result.size());
        verify(orderRepository, times(1)).findAll();
    }
 
    @Test
    void testPlaceOrder() {
        OrderInput input = new OrderInput();
        input.setProductName("Product1");
        input.setQuantity(2);
        input.setFullName("John Doe");
        input.setContactNumber("1234567890");
        input.setFullAddress("123 Street");
        input.setTransactionId("txn001");
 
        User mockUser = new User();
        mockUser.setProfileId("profile123");
 
        Cart mockCart = new Cart(); // optional if used
        mockCart.setCartId("cart001");
 
        Product mockProduct = new Product();
        mockProduct.setProductId("P001");
        mockProduct.setProductName("Product1");
        mockProduct.setTotalPrice(100.0);
 
        when(userFeignClient.getProfileByFullName("John Doe")).thenReturn(mockUser);
        when(cartFeignClient.getCartById("profile123")).thenReturn(mockCart);
        when(productFeignClient.getProductByName("Product1")).thenReturn(mockProduct);
 
        OrderDetail expectedOrder = new OrderDetail(
                200.0,
                "ORDER PLACED",
                "Product1",
                2,
                "1234567890",
                "123 Street",
                "profile123",
                "txn001"
        );
 
        when(orderRepository.save(any(OrderDetail.class))).thenReturn(expectedOrder);
 
        OrderDetail result = orderService.placeOrder(input);
 
        assertNotNull(result);
        assertEquals("Product1", result.getProductName());
        assertEquals(2, result.getQuantity());
        assertEquals(200.0, result.getTotalPrice());
        assertEquals("profile123", result.getProfileId());
 
        verify(orderRepository, times(1)).save(any(OrderDetail.class));
        verify(userFeignClient).getProfileByFullName("John Doe");
        verify(productFeignClient).getProductByName("Product1");
    }
 
    @Test
    void testGetOrderById() {
        String orderId = "123";
        OrderDetail mockOrder = new OrderDetail();
        mockOrder.setOrderId(orderId);
 
        when(orderRepository.findById(orderId)).thenReturn(Optional.of(mockOrder));
 
        OrderDetail result = orderService.getOrderById(orderId);
 
        assertNotNull(result);
        assertEquals(orderId, result.getOrderId());
        verify(orderRepository).findById(orderId);
    }
 
    @Test
    void testGetOrderByIdWithInvalidId() {
        String orderId = "invalid";
        when(orderRepository.findById(orderId)).thenReturn(Optional.empty());
 
        Exception exception = assertThrows(RuntimeException.class, () -> {
            orderService.getOrderById(orderId);
        });
 
        assertTrue(exception.getMessage().contains("Order not found"));
    }
 
    @Test
    void testDeleteOrderByIdWhenExists() {
        String orderId = "order123";
        when(orderRepository.existsById(orderId)).thenReturn(true);
 
        orderService.deleteOrderById(orderId);
 
        verify(orderRepository).deleteById(orderId);
    }
 
    @Test
    void testDeleteOrderByIdWhenNotExists() {
        String orderId = "invalid";
        when(orderRepository.existsById(orderId)).thenReturn(false);
 
        assertThrows(RuntimeException.class, () -> {
            orderService.deleteOrderById(orderId);
        });
 
        verify(orderRepository, never()).deleteById(orderId);
    }
}
 
 