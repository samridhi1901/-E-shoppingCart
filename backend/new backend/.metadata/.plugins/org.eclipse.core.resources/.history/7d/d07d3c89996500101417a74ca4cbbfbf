package com.cg.estore.orderservice.controllertests;
import com.cg.estore.orderservice.controller.OrderController;
import com.cg.estore.orderservice.entity.Address;
import com.cg.estore.orderservice.entity.Cart;
import com.cg.estore.orderservice.entity.OrderDetail;
import com.cg.estore.orderservice.serviceImpl.OrderService;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

import java.util.Arrays;
import java.util.List;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
@SpringBootTest
@AutoConfigureMockMvc
class OrderControllerTests {

    @Autowired
    private MockMvc mockMvc;

    @Mock
    private OrderService orderService;

    @InjectMocks
    private OrderController orderController;

    @Autowired
    private ObjectMapper objectMapper;

    @Test
    void getAllOrders_shouldReturnListOfOrders() throws Exception {
        // Arrange
        when(orderService.getAllOrders()).thenReturn(Arrays.asList(new OrderDetail(), new OrderDetail()));

        // Act & Assert
        mockMvc.perform(MockMvcRequestBuilders.get("/orders/all"))
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath("$").isArray())
                .andExpect(MockMvcResultMatchers.jsonPath("$").isNotEmpty());
    }

    @Test
    void getOrderById_shouldReturnOrder() throws Exception {
        // Arrange
        OrderDetail mockOrder = new OrderDetail();
        when(orderService.getOrderById("1")).thenReturn(mockOrder);

        // Act & Assert
        mockMvc.perform(MockMvcRequestBuilders.get("/orders/1"))
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath("$.orderId").exists());
    }

    @Test
    void placeOrder_withValidCartId_shouldReturnCreated() throws Exception {
        // Arrange
        when(orderService.placeOrder("cart123")).thenReturn(new OrderDetail());

        // Act & Assert
        mockMvc.perform(MockMvcRequestBuilders.post("/orders/placeOrder/cart123"))
                .andExpect(MockMvcResultMatchers.status().isCreated());
    }

    @Test
    void placeOrder_withInvalidCartId_shouldReturnBadRequest() throws Exception {
        // Act & Assert
        mockMvc.perform(MockMvcRequestBuilders.post("/orders/placeOrder/"))
                .andExpect(MockMvcResultMatchers.status().isBadRequest());
    }

//    @Test
//    void changeStatus_withValidOrderId_shouldReturnStatus() throws Exception {
//        // Arrange
//        when(orderService.changeStatus("1", 2)).thenReturn("Status Changed");
//
//        // Act & Assert
//        mockMvc.perform(MockMvcRequestBuilders.put("/orders/changeStatus")
//                .param("orderId", "1")
//                .param("newStatus", "2"))
//                .andExpect(MockMvcResultMatchers.status().isOk())
//                .andExpect(MockMvcResultMatchers.content().string("Status Changed"));
//    }

    @Test
    void changeStatus_withInvalidOrderId_shouldReturnBadRequest() throws Exception {
        // Act & Assert
        mockMvc.perform(MockMvcRequestBuilders.put("/orders/changeStatus")
                .param("orderId", "")
                .param("newStatus", "2"))
                .andExpect(MockMvcResultMatchers.status().isBadRequest());
    }

    @Test
    void deleteOrder_withValidOrderId_shouldReturnNoContent() throws Exception {
        // Act & Assert
        mockMvc.perform(MockMvcRequestBuilders.delete("/orders/1"))
                .andExpect(MockMvcResultMatchers.status().isNoContent());
    }

    @Test
    void deleteOrder_withInvalidOrderId_shouldReturnNotFound() throws Exception {
        // Act & Assert
        mockMvc.perform(MockMvcRequestBuilders.delete("/orders/"))
                .andExpect(MockMvcResultMatchers.status().isNotFound());
    }

    @Test
    void storeAddress_withValidAddress_shouldReturnNoContent() throws Exception {
        // Arrange
        Address address = new Address();
        // You may need to set up valid address details

        // Act & Assert
        mockMvc.perform(MockMvcRequestBuilders.post("/orders/storeAddress")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(address)))
                .andExpect(MockMvcResultMatchers.status().isNoContent());
    }

    @Test
    void storeAddress_withInvalidAddress_shouldReturnBadRequest() throws Exception {
        // Arrange
        Address invalidAddress = new Address();
        // You may need to set up invalid address details

        // Act & Assert
        mockMvc.perform(MockMvcRequestBuilders.post("/orders/storeAddress")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(invalidAddress)))
                .andExpect(MockMvcResultMatchers.status().isBadRequest());
    }

//    @Test
//    void getAddressBycustomerID_withValidCustomerId_shouldReturnListOfAddresses() throws Exception {
//        // Arrange
//        when(orderService.getAddressBycustomerID("customer123")).thenReturn(Arrays.asList(new Address(), new Address()));
//
//        // Act & Assert
//        mockMvc.perform(MockMvcRequestBuilders.get("/orders/customer/customer123/addresses"))
//                .andExpect(MockMvcResultMatchers.status().isOk())
//                .andExpect(MockMvcResultMatchers.jsonPath("$").isArray())
//                .andExpect(MockMvcResultMatchers.jsonPath("$").isNotEmpty());
//    }

    @Test
    void getAddressBycustomerID_withInvalidCustomerId_shouldReturnNotFound() throws Exception {
        // Act & Assert
        mockMvc.perform(MockMvcRequestBuilders.get("/orders/customer/addresses"))
                .andExpect(MockMvcResultMatchers.status().isNotFound());
    }

//    @Test
//    void getAllAddresses_shouldReturnListOfAddresses() throws Exception {
//        // Arrange
//        when(orderService.getAllAddress()).thenReturn(Arrays.asList(new Address(), new Address()));
//
//        // Act & Assert
//        mockMvc.perform(MockMvcRequestBuilders.get("/orders/addresses"))
//                .andExpect(MockMvcResultMatchers.status().isOk())
//                .andExpect(MockMvcResultMatchers.jsonPath("$").isArray())
//                .andExpect(MockMvcResultMatchers.jsonPath("$").isNotEmpty());
//    }

    @Test
    void onlinePayment_withValidCart_shouldReturnNoContent() throws Exception {
        // Arrange
        Cart cart = new Cart();
        // You may need to set up valid cart details

        // Act & Assert
        mockMvc.perform(MockMvcRequestBuilders.post("/orders/onlinePayment")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(cart)))
                .andExpect(MockMvcResultMatchers.status().isNoContent());
    }

    @Test
    void onlinePayment_withInvalidCart_shouldReturnBadRequest() throws Exception {
        // Arrange
        Cart invalidCart = new Cart();
        // You may need to set up invalid cart details

        // Act & Assert
        mockMvc.perform(MockMvcRequestBuilders.post("/orders/onlinePayment")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(invalidCart)))
                .andExpect(MockMvcResultMatchers.status().isBadRequest());
    }

    // Add more test cases for other methods in OrderController
}