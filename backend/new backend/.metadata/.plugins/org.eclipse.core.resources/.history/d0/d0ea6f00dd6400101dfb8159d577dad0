package com.cg.estore.producservice.controllertests;
import com.cg.estore.productservice.controller.ProductController;
import com.cg.estore.productservice.entity.Product;
import com.cg.estore.productservice.exception.ProductNotFoundException;
import com.cg.estore.productservice.service.ProductService;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.ResponseEntity;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class ProductControllerTest {

    @Mock
    private ProductService productService;

    @InjectMocks
    private ProductController productController;

    @Test
    void addProduct() {
        // Given
        Product product = new Product();
        when(productService.addProduct(any(Product.class))).thenReturn(product);

        // When
//        ResponseEntity<Product> response = productController.addProduct(product);
//
//        // Then
//        assertEquals(product, response.getBody());
    }

    @Test
    void getAllProducts() {
        // Given
        List<Product> products = new ArrayList<>();
        when(productService.getAllProducts()).thenReturn(products);

        // When
        ResponseEntity<List<Product>> response = productController.getAllProducts();

        // Then
        //assertEquals(products, response.getBody());
    }

    @Test
    void getProductById() {
        // Given
        String productId = "1";
        Product product = new Product();
        when(productService.getProductById(productId)).thenReturn(Optional.of(product));

        // When
//        ResponseEntity<Product> response = productController.getProductById(productId);
//
//        // Then
//        assertEquals(product, response.getBody());
    }

    @Test
    void getProductById_ProductNotFound() {
        // Given
        String productId = "1";
        when(productService.getProductById(productId)).thenReturn(Optional.empty());

        // When, Then
        //assertThrows(ProductNotFoundException.class, () -> productController.getProductById(productId));
    }

    // Similar tests for other methods...

    @Test
    void deleteProductById() {
        // Given
        String productId = "1";

        // When
//        ResponseEntity<Void> response = productController.deleteProductById(productId);
//
//        // Then
//        verify(productService, times(1)).deleteProductById(productId);
    }
}
package com.cg.estore.productservice.controller;


import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import com.cg.estore.productservice.entity.Product;
import com.cg.estore.productservice.exception.ProductNotFoundException;
import com.cg.estore.productservice.service.ProductService;
import com.cg.estore.productservice.service.ProductServiceImpl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
//@CrossOrigin("*")
@RestController
@RequestMapping("/products")
public class ProductController {
    

    @Autowired
    ProductServiceImpl productService;
    
    @PostMapping("/product")
    public ResponseEntity<Product> addProduct(@RequestBody Product product) {
       Product product2= productService.addProduct(product);
        return new ResponseEntity<>(product2,HttpStatus.OK);
    }

    @GetMapping("/all")
    public ResponseEntity<List<Product>> getAllProducts() {
        try {
            List<Product> products = productService.getAllProducts();
            System.out.println(products);
            return new ResponseEntity<>(products, HttpStatus.OK);
        } catch (ProductNotFoundException e) {
            return new ResponseEntity<>(new ArrayList<>(), HttpStatus.NOT_FOUND);
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }




    @GetMapping("/getProduct/{productId}")
    public ResponseEntity<Product> getProductById(@PathVariable String productId) {
        Optional<Product> product = productService.getProductById(productId);
        if (product.isPresent()) {
            return new ResponseEntity<>(product.get(), HttpStatus.OK);
        } else {
            throw new ProductNotFoundException("Product with ID " + productId + " not found.");
        }
    }

    @GetMapping("/name/{productName}")
    public ResponseEntity<Optional<Product>> getProductByName(@PathVariable String productName) {
        Optional<Product> product = productService.getProductByName(productName);
        if (product.isPresent()) {
            return new ResponseEntity<>(product, HttpStatus.OK);
        } else {
            throw new ProductNotFoundException("Product with name '" + productName + "' not found.");
        }
    }

    @PutMapping("/update")
    public ResponseEntity<Product> updateProduct(@RequestBody Product product) {
        Product updatedProduct = productService.updateProduct(product);
    	
        return new ResponseEntity<>(updatedProduct, HttpStatus.OK);
    }

    @DeleteMapping("/{productId}")
    public ResponseEntity<Void> deleteProductById(@PathVariable String productId) {
        productService.deleteProductById(productId);
        return new ResponseEntity<>(HttpStatus.OK);
    }

    @GetMapping("/category/{category}")
    public ResponseEntity<List<Product>> getProductsByCategory(@PathVariable String category) {
        List<Product> products = productService.getProductsByCategory(category);
        return new ResponseEntity<>(products, HttpStatus.OK);
    }

    @GetMapping("/type/{productType}")
    public ResponseEntity<List<Product>> getProductsByType(@PathVariable String productType) {
        List<Product> products = productService.getProductsByType(productType);
        return new ResponseEntity<>(products, HttpStatus.OK);
    }
    
    @PutMapping("/{productId}/{quantity}")
    public void updateProductQuantity(@PathVariable String productId, @RequestParam int quantity) {
        productService.updateProductQuantity(productId, quantity);
    }
    
    @GetMapping("/categories")
    	public String[] getCategories(){
    		return productService.getCategories();
    	}
    
    
}