package com.user.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.login.controller.UserController;
import com.login.dto.AuthDto;
import com.login.dto.userDto;
import com.login.exception.InvalidCredentialException;
import com.login.model.User;
import com.login.security.Jwtutil;
import com.login.service.UserServiceImpl;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.test.web.servlet.MockMvc;

import java.util.List;
import java.util.Map;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(UserController.class)
public class UserControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private UserServiceImpl userService;

    @MockBean
    private Jwtutil jwtutil;

    @MockBean
    private BCryptPasswordEncoder encoder;

    @Autowired
    private ObjectMapper objectMapper;

    private User sampleUser;

    @BeforeEach
    void setUp() {
        sampleUser = new User();
        sampleUser.setProfileId("P123");
        sampleUser.setFullName("Test User");
        sampleUser.setEmailId("test@example.com");
        sampleUser.setPassword("password");
        sampleUser.setRole("USER");
        sampleUser.setMobileNumber(1234567890L);
    }

    @Test
    void testRegisterUserSuccess() throws Exception {
        when(userService.genrateUniqueRandomId()).thenReturn("P123");
        when(userService.registerUser(any(User.class))).thenReturn(true);

        mockMvc.perform(post("/profiles/register")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(sampleUser)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.message").value("User registered successfully"))
                .andExpect(jsonPath("$.emailId").value("test@example.com"));
    }

    @Test
    void testLoginSuccess() throws Exception {
        AuthDto authDto = new AuthDto("test@example.com", "password");

        userDto response = new userDto("P123", "Test User", "token123", "USER");

        when(userService.login(any(AuthDto.class))).thenReturn(response);
        when(encoder.encode(any())).thenReturn("encodedPassword");

        mockMvc.perform(post("/profiles/login")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(authDto)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.Message").value("Login successful"))
                .andExpect(jsonPath("$.Token").value("token123"))
                .andExpect(jsonPath("$.role").value("USER"));
    }

    @Test
    void testGetAllProfiles() throws Exception {
        when(userService.getAllProfiles()).thenReturn(List.of(sampleUser));

        mockMvc.perform(get("/profiles/all"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].emailId").value("test@example.com"));
    }

    @Test
    void testGetByProfileIdFound() throws Exception {
        when(userService.getByProfileId("P123")).thenReturn(sampleUser);

        mockMvc.perform(get("/profiles/getUser/P123"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.profileId").value("P123"));
    }

    @Test
    void testGetByMobileNumberFound() throws Exception {
        when(userService.findByMobileNumber(1234567890L)).thenReturn(sampleUser);

        mockMvc.perform(get("/profiles/by-mobile-number/1234567890"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.mobileNumber").value(1234567890L));
    }

    @Test
    void testDeleteProfileFound() throws Exception {
        when(userService.getByProfileId("P123")).thenReturn(sampleUser);

        mockMvc.perform(delete("/profiles/P123"))
                .andExpect(status().isOk());
    }

    @Test
    void testGetProfileByFullNameFound() throws Exception {
        when(userService.getByFullName("Test User")).thenReturn(sampleUser);

        mockMvc.perform(get("/profiles/getfullName/Test User"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.fullName").value("Test User"));
    }

    @Test
    void testUpdateProfile() throws Exception {
        when(userService.getByProfileId("P123")).thenReturn(sampleUser);

        mockMvc.perform(put("/profiles/P123")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(sampleUser)))
                .andExpect(status().isOk());
    }

    @Test
    void testValidateToken() throws Exception {
        userDto dto = new userDto("P123", "Test User", "token123", "USER");

        Mockito.doNothing().when(jwtutil).validateToken("token123");

        mockMvc.perform(get("/profiles/validate")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(dto)))
                .andExpect(status().isOk())
                .andExpect(content().string("Token is valid"));
    }
}
