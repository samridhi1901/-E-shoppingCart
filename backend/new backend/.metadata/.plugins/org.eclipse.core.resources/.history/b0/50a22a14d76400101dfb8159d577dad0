package com.login.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.login.dto.AuthDto;
import com.login.dto.userDto;
import com.login.exception.InvalidCredentialException;
import com.login.exception.UserAlreadyPresentException;
import com.login.model.User;
import com.login.security.Jwtutil;
import com.login.service.UserServiceImpl;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.test.web.servlet.MockMvc;

import java.util.Collections;

import static org.mockito.ArgumentMatchers.any;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(UserController.class)
public class UserControllerTest {

    @Autowired private MockMvc mockMvc;
    @Autowired private ObjectMapper objectMapper;

    @MockBean private UserServiceImpl userService;
    @MockBean private Jwtutil jwtutil;
    @MockBean private BCryptPasswordEncoder encoder;

    @Test
    public void testRegisterUser_Success() throws Exception {
        User user = new User();
        user.setFullName("John Doe");
        user.setEmailId("john@example.com");
        user.setPassword("pass123");

        Mockito.when(userService.genrateUniqueRandomId()).thenReturn("123456");
        Mockito.when(userService.registerUser(any(User.class))).thenReturn(true);

        mockMvc.perform(post("/profiles/register")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(user)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.message").value("User registered successfully"))
                .andExpect(jsonPath("$.emailId").value("john@example.com"));
    }

    @Test
    public void testRegisterUser_Failure() throws Exception {
        User user = new User();
        user.setFullName("John Doe");
        user.setEmailId("john@example.com");
        user.setPassword("pass123");

        Mockito.when(userService.genrateUniqueRandomId()).thenReturn("123456");
        Mockito.when(userService.registerUser(any(User.class))).thenReturn(false);

        mockMvc.perform(post("/profiles/register")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(user)))
                .andExpect(status().isInternalServerError())
                .andExpect(jsonPath("$.error").value("Something went wrong!"));
    }

    @Test
    public void testLoginUser_Success() throws Exception {
        AuthDto authDto = new AuthDto();
        authDto.setEmail("john@example.com");
        authDto.setPassword("password");

        userDto responseDto = new userDto();
        responseDto.setUserId("123");
        responseDto.setUsername("John Doe");
        responseDto.setAccessToken("token123");
        responseDto.setRole("USER");

        Mockito.when(userService.login(any(AuthDto.class))).thenReturn(responseDto);
        Mockito.when(encoder.encode(any())).thenReturn("encodedPassword");

        mockMvc.perform(post("/profiles/login")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(authDto)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.Message").value("Login successful"))
                .andExpect(jsonPath("$.Token").value("token123"))
                .andExpect(jsonPath("$.role").value("USER"));
    }

    @Test
    public void testLoginUser_InvalidCredentials() throws Exception {
        AuthDto authDto = new AuthDto();
        authDto.setEmail("john@example.com");
        authDto.setPassword("wrongPassword");

        Mockito.when(userService.login(any(AuthDto.class)))
                .thenThrow(new InvalidCredentialException("Invalid credentials"));

        mockMvc.perform(post("/profiles/login")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(authDto)))
                .andExpect(status().isUnauthorized());
    }
}
